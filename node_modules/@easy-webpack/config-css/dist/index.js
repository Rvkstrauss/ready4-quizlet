"use strict";
var core_1 = require('@easy-webpack/core');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
module.exports = function css(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.filename, filename = _c === void 0 ? '[name].css' : _c, _d = _b.allChunks, allChunks = _d === void 0 ? false : _d, _e = _b.sourceMap, sourceMap = _e === void 0 ? false : _e, _f = _b.extractText, extractText = _f === void 0 ? undefined : _f, _g = _b.resolveRelativeUrl, resolveRelativeUrl = _g === void 0 ? undefined : _g, _h = _b.additionalLoaders, additionalLoaders = _h === void 0 ? [] : _h, _j = _b.test, test = _j === void 0 ? /\.css$/i : _j;
    return function css() {
        var loaders = ['style-loader', ("css-loader" + (sourceMap ? '?sourceMap' : ''))];
        if (resolveRelativeUrl) {
            loaders.push("resolve-url-loader" + (sourceMap ? '?sourceMap' : ''));
            sourceMap = true; // source maps need to be on for this
        }
        if (additionalLoaders) {
            loaders.push.apply(loaders, additionalLoaders);
        }
        var extractCss = extractText !== false;
        var providedInstance = extractText instanceof ExtractTextPlugin;
        var extractTextInstances = this.metadata.extractTextInstances = this.metadata.extractTextInstances || new Map();
        if (!providedInstance) {
            if (extractCss) {
                extractText = extractTextInstances.get(filename);
                if (!extractText) {
                    extractText = new ExtractTextPlugin(extractText instanceof Object ? extractText : { filename: filename, allChunks: allChunks, sourceMap: sourceMap });
                    extractTextInstances.set(filename, extractText);
                }
            }
            else {
                extractText = null;
            }
        }
        var config = {
            module: {
                rules: core_1.get(this, 'module.rules', []).concat([{
                        test: test,
                        loaders: extractCss ?
                            extractText.extract({ notExtractLoader: loaders[0], loader: loaders.slice(1) }) :
                            loaders
                    }])
            },
            metadata: {
                extractTextInstances: extractTextInstances
            }
        };
        var plugins = core_1.get(this, 'plugins', []);
        if (extractText && !providedInstance && !(this.plugins || []).find(function (plugin) { return (plugin === extractText) || (plugin instanceof ExtractTextPlugin && plugin.id === extractText.id); })) {
            config.plugins = [
                /**
                 * Plugin: ExtractTextPlugin
                 * It moves every import "style.css" in entry chunks into a single concatenated css output file.
                 * So your styles are no longer inlined into the javascript, but separate in a css bundle file (styles.css).
                 * If your total stylesheet volume is big, it will be faster because the stylesheet bundle is loaded in parallel to the javascript bundle.
                 */
                extractText
            ].concat(plugins);
        }
        if (resolveRelativeUrl instanceof Object) {
            config['resolveUrlLoader'] = resolveRelativeUrl;
        }
        return config;
    };
};
//# sourceMappingURL=index.js.map