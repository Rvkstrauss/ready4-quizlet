import { Webpack as WebpackConfig } from './webpack';
export { get } from 'lodash';
export { Webpack as WebpackConfig } from './webpack';
export * from '@easy-webpack/assign';
export declare const mergeSummary: {
    dependencies: any[];
    merged: any[];
    skipped: any[];
};
export interface ConfigDescription {
    name?: string;
    dependencies?: Array<string>;
    description?: string;
    enabled?: undefined | boolean | ((config?: WebpackConfig) => boolean);
    action?: 'append' | 'prepend' | 'replace' | ((previousConfig: WebpackConfig, thisConfig?: WebpackConfig, name?: string) => WebpackConfig);
}
export declare const description: string;
export declare type WebpackConfigWithDescription = WebpackConfig & {
    'ðŸ“„'?: ConfigDescription;
};
export declare function merge(config: WebpackConfig, ...configs: Array<WebpackConfigWithDescription>): WebpackConfig;
/**
 * Below are backwards compatibile easy-webpack configs:
 */
/**
 * A webpack config object with optional 'metadata'
 */
export declare type WebpackConfigWithMetadata = WebpackConfig & {
    metadata?: any;
};
export declare type EasyWebpackConfig = WebpackConfigWithMetadata | ((this: WebpackConfigWithMetadata) => WebpackConfigWithMetadata);
export declare const generateConfigOptions: {
    addDefaultMetadata: boolean;
    alwaysAddBaseMetadata: boolean;
};
export declare function generateConfig(...configs: Array<EasyWebpackConfig>): WebpackConfigWithMetadata;
export declare function stripMetadata(config: EasyWebpackConfig): WebpackConfig;
export default generateConfig;
