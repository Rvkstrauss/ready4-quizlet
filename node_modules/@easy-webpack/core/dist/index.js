"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var assign_1 = require('@easy-webpack/assign');
var lodash_1 = require('lodash');
exports.get = lodash_1.get;
__export(require('@easy-webpack/assign'));
function hasProcessFlag(flag) {
    return process.argv.join('').indexOf(flag) > -1;
}
exports.mergeSummary = { dependencies: [], merged: [], skipped: [] };
exports.description = 'ðŸ“„';
function merge(config) {
    var configs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        configs[_i - 1] = arguments[_i];
    }
    exports.mergeSummary.dependencies = [];
    exports.mergeSummary.merged = [];
    exports.mergeSummary.skipped = [];
    var i = 0;
    for (var _a = 0, configs_1 = configs; _a < configs_1.length; _a++) {
        var overlayConfig = configs_1[_a];
        var configDescription = overlayConfig[exports.description] || {};
        var name = configDescription.name || "unnamed config " + String(i++);
        var enabled = configDescription.enabled;
        var action = configDescription.action || 'append';
        if (configDescription.dependencies && configDescription.dependencies.length) {
            (_b = exports.mergeSummary.dependencies).push.apply(_b, overlayConfig[exports.description].dependencies);
        }
        delete overlayConfig[exports.description];
        if (enabled === undefined || enabled === true || (typeof enabled === 'function' && enabled(config))) {
            config = typeof action === 'function' ? action(config, overlayConfig, name) : assign_1.assign(config, overlayConfig, name, action);
            exports.mergeSummary.merged.push(name);
        }
        else {
            exports.mergeSummary.skipped.push(name);
        }
    }
    return config;
    var _b;
}
exports.merge = merge;
exports.generateConfigOptions = { addDefaultMetadata: true, alwaysAddBaseMetadata: false };
function generateConfig() {
    var configs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        configs[_i - 0] = arguments[_i];
    }
    var config = {};
    if (exports.generateConfigOptions.alwaysAddBaseMetadata || (!config.metadata && exports.generateConfigOptions.addDefaultMetadata)) {
        config.metadata = {
            port: parseInt(process.env.WEBPACK_PORT) || 9000,
            host: process.env.WEBPACK_HOST || 'localhost',
            ENV: process.env.NODE_ENV || process.env.ENV || 'development',
            HMR: hasProcessFlag('hot') || !!process.env.WEBPACK_HMR,
        };
    }
    for (var _a = 0, configs_2 = configs; _a < configs_2.length; _a++) {
        var configMethod = configs_2[_a];
        if (typeof configMethod === 'function') {
            var overlayConfig = configMethod.apply(config);
            config = assign_1.assign(config, overlayConfig, configMethod['name'] || 'config', 'replace');
        }
        else {
            var overlayConfig = configMethod;
            config = assign_1.assign(config, overlayConfig, configMethod['name'] || 'config', 'append');
        }
    }
    return config;
}
exports.generateConfig = generateConfig;
function stripMetadata(config) {
    var overlayConfig;
    if (typeof config === 'function') {
        overlayConfig = config.apply({});
    }
    else {
        overlayConfig = Object.assign({}, config);
    }
    delete overlayConfig.metadata;
    return overlayConfig;
}
exports.stripMetadata = stripMetadata;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = generateConfig;
//# sourceMappingURL=index.js.map