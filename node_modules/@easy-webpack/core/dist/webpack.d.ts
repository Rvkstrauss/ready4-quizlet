export declare namespace WebpackType {
    interface Node {
        Buffer?: boolean | "mock";
        __dirname?: boolean | "mock";
        __filename?: boolean | "mock";
        console?: boolean | "mock";
        global?: boolean;
        process?: boolean | "mock";
    }
    interface WatchOptions {
        aggregateTimeout: number;
        poll: boolean | number;
    }
    interface Module {
        exprContextCritical?: boolean;
        exprContextRecursive?: boolean;
        exprContextRegExp?: RegExp;
        exprContextRequest?: string;
        loaders?: RuleSetRules;
        noParse?: RegExp[] | RegExp;
        rules?: RuleSetRules;
        unknownContextCritical?: boolean;
        unknownContextRecursive?: boolean;
        unknownContextRegExp?: RegExp;
        unknownContextRequest?: string;
        wrappedContextCritical?: boolean;
        wrappedContextRecursive?: boolean;
        wrappedContextRegExp?: RegExp;
    }
    interface RuleSetRule {
        enforce?: "pre" | "post";
        exclude?: RuleSetCondition;
        include?: RuleSetCondition;
        issuer?: RuleSetCondition;
        loader?: string | RuleSetUse;
        loaders?: RuleSetUse;
        oneOf?: RuleSetRules;
        options?: RuleSetQuery;
        parser?: Object;
        query?: RuleSetQuery;
        resource?: RuleSetCondition;
        rules?: RuleSetRules;
        test?: RuleSetCondition;
        use?: RuleSetUse;
    }
    interface RuleSetConditionObject {
        and?: RuleSetConditions;
        exclude?: RuleSetCondition;
        include?: RuleSetCondition;
        not?: RuleSetConditions;
        or?: RuleSetConditions;
        test?: RuleSetCondition;
    }
    interface RuleSetUseItemObject {
        loader?: string;
        options?: RuleSetQuery;
        query?: RuleSetQuery;
    }
    interface Output {
        auxiliaryComment?: string | OutputAuxiliaryComment;
        chunkFilename?: string;
        crossOriginLoading?: false | "anonymous" | "use-credentials";
        devtoolFallbackModuleFilenameTemplate?: string | Function;
        devtoolLineToLine?: boolean | OutputDevtoolLineToLine;
        devtoolModuleFilenameTemplate?: string | Function;
        filename?: string;
        hashDigest?: string;
        hashDigestLength?: number;
        hashFunction?: string;
        hotUpdateChunkFilename?: string;
        hotUpdateFunction?: string;
        hotUpdateMainFilename?: string;
        jsonpFunction?: string;
        library?: string | string[];
        libraryTarget?: OutputLibraryTarget;
        path?: string;
        pathinfo?: boolean;
        publicPath?: string;
        sourceMapFilename?: string;
        sourcePrefix?: string;
        umdNamedDefine?: boolean;
    }
    interface OutputAuxiliaryComment {
        amd?: string;
        commonjs?: string;
        commonjs2?: string;
        root?: string;
    }
    interface OutputDevtoolLineToLine {
        exclude?: string;
        include?: string;
        test?: string;
    }
    interface Resolve {
        alias?: {
            [key: string]: string;
        } | ResolveAlias[];
        aliasFields?: [string | string[]];
        cachePredicate?: Function;
        descriptionFiles?: string[];
        enforceExtension?: boolean;
        enforceModuleExtension?: boolean;
        extensions?: string[];
        fileSystem?: any;
        mainFields?: [string | string[]];
        mainFiles?: string[];
        moduleExtensions?: string[];
        modules?: string[];
        plugins?: any[];
        resolver?: any;
        symlinks?: boolean;
        unsafeCache?: boolean | Object;
    }
    interface ResolveAlias {
        alias?: string;
        name?: string;
        onlyModule?: boolean;
    }
    interface Object {
        [key: string]: any;
    }
    type EntryItem = string | string[];
    type OutputLibraryTarget = "var" | "assign" | "this" | "window" | "global" | "commonjs" | "commonjs2" | "commonjs-module" | "amd" | "umd" | "umd2" | "jsonp";
    type Stats = "none" | "errors-only" | "minimal" | "normal" | "verbose";
    type Target = "web" | "webworker" | "node" | "async-node" | "node-webkit" | "atom" | "electron" | "electron-main" | "electron-renderer";
    type Externals = string | Object | ((context: any, request: any, callback: (err: any, result: any) => any) => any) | RegExp;
    type RuleSetConditionSimple = RegExp | string | Function | RuleSetConditionObject;
    type RuleSetCondition = RuleSetConditionSimple | RuleSetConditionSimple[];
    type RuleSetConditions = RuleSetCondition[];
    type RuleSetUse = RuleSetUseItem | RuleSetUseItem[];
    type RuleSetUseItem = string | RuleSetUseItemObject;
    type RuleSetQuery = Object | string;
    type RuleSetRules = RuleSetRule[];
}
export interface Webpack {
    /**
     * Set the value of `require.amd` and `define.amd`.
     */
    amd?: {
        [key: string]: boolean;
    };
    /**
     * Report the first error as a hard error instead of tolerating it.
     */
    bail?: boolean;
    /**
     * Cache generated modules and chunks to improve performance for multiple incremental builds.
     *
     * Boolean: You can pass `false` to disable it.
     * Object: You can pass an object to enable it and let webpack use the passed object as cache.This way you can share the cache object between multiple compiler calls.
     */
    cache?: false | WebpackType.Object;
    context?: string;
    /**
     * References to other configurations to depend on.
     */
    dependencies?: string[];
    /**
     * Can be used to configure the behaviour of webpack-dev-server when the webpack config is passed to webpack-dev-server CLI.
     */
    devServer?: WebpackType.Object;
    /**
     * A developer tool to enhance debugging.
     * Note: Boolean can be used only with value `false`.
     */
    devtool?: string | false;
    /**
     * The entry point(s) of the compilation.
     *
     * Object: Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array. If its' array all modules are loaded upon startup. The last one is exported. If it's a string look at the definition for string.
     * String: The entry point for one output file. The string is resolved to a module which is loaded upon startup.
     */
    entry?: WebpackType.EntryItem | {
        [key: string]: WebpackType.EntryItem;
    };
    /**
     * Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.
     *
     * String: An exact matched dependency becomes external. The same string is used as external dependency.
     * Object: If an dependency matches exactly a property of the object, the property value is used as dependency.
     * Function: `function(context, request, callback(err, result))` The function is called on each dependency.
     * RegExp: Every matched dependency becomes external.
     * Array: Use the all externals options defined above.
     */
    externals?: WebpackType.Externals | WebpackType.Externals[];
    /**
     * Custom values available in the loader context.
     */
    loader?: WebpackType.Object;
    /**
     * Options affecting the normal modules (`NormalModuleFactory`).
     */
    module?: WebpackType.Module;
    /**
     * Name of the configuration. Used when loading multiple configurations.
     */
    name?: string;
    /**
     * Include polyfills or mocks for various node stuff.
     */
    node?: WebpackType.Node;
    /**
     * Options affecting the output of the compilation. `output` options tell webpack how to write the compiled files to disk.
     */
    output?: WebpackType.Output;
    /**
     * Add additional plugins to the compiler.
     */
    plugins?: WebpackType.Object[];
    /**
     * Capture timing information for each module.
     */
    profile?: boolean;
    /**
     * Store compiler state to a json file.
     */
    recordsInputPath?: string;
    /**
     * Load compiler state from a json file.
     */
    recordsOutputPath?: string;
    /**
     * Store/Load compiler state from/to a json file. This will result in persistent ids of modules and chunks. An absolute path is expected. `recordsPath` is used for `recordsInputPath` and `recordsOutputPath` if they left undefined.
     */
    recordsPath?: string;
    /**
     * Options affecting the resolving of modules.
     */
    resolve?: WebpackType.Resolve;
    resolveLoader?: WebpackType.Resolve;
    /**
     * Used by the webpack CLI program to pass stats options.
     */
    stats?: WebpackType.Object | boolean | WebpackType.Stats;
    /**
     * Specifies webpack deployment target. This modifies how the webpack bootstrap function is generated based on each target.
     */
    target?: Function | WebpackType.Target;
    /**
     * Enter watch mode, which rebuilds on file change.
     */
    watch?: boolean;
    /**
     * TODO add description
     */
    watchOptions?: WebpackType.WatchOptions;
}
