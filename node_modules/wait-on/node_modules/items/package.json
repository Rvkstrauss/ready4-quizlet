{
  "_args": [
    [
      {
        "name": "items",
        "raw": "items@https://registry.npmjs.org/items/-/items-2.1.1.tgz",
        "rawSpec": "https://registry.npmjs.org/items/-/items-2.1.1.tgz",
        "scope": null,
        "spec": "https://registry.npmjs.org/items/-/items-2.1.1.tgz",
        "type": "remote"
      },
      "/Users/rivkastrauss/WebstormProjects/ready4/node_modules/wait-on"
    ]
  ],
  "_from": "items@>=2.0.0 <3.0.0",
  "_id": "items@2.1.1",
  "_inCache": true,
  "_location": "/wait-on/items",
  "_phantomChildren": {},
  "_requested": {
    "name": "items",
    "raw": "items@https://registry.npmjs.org/items/-/items-2.1.1.tgz",
    "rawSpec": "https://registry.npmjs.org/items/-/items-2.1.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/items/-/items-2.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/wait-on",
    "/wait-on/joi"
  ],
  "_resolved": "https://registry.npmjs.org/items/-/items-2.1.1.tgz",
  "_shasum": "8bd16d9c83b19529de5aea321acaada78364a198",
  "_shrinkwrap": null,
  "_spec": "items@https://registry.npmjs.org/items/-/items-2.1.1.tgz",
  "_where": "/Users/rivkastrauss/WebstormProjects/ready4/node_modules/wait-on",
  "bugs": {
    "url": "https://github.com/hapijs/items/issues"
  },
  "dependencies": {},
  "description": "Bare minimum async methods",
  "devDependencies": {
    "code": "3.x.x",
    "lab": "10.x.x"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/hapijs/items#readme",
  "keywords": [
    "async",
    "serial",
    "parallel"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "name": "items",
  "optionalDependencies": {},
  "readme": "#items\n\nBare minimum async methods adapted specifically for the very limited **hapi** core use cases. Use\n[async](https://github.com/caolan/async) for all your application needs.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/items.png)](http://travis-ci.org/hapijs/items)\n\nLead Maintainer - [Raquel VÃ©lez](https://github.com/rockbot)\n\n## `Items.serial(items, method, callback)`\n\nRuns `method` against each value in the `items` array *in series*. `callback` is executed when all of the tasks are complete. Calling back with an error will short-circuit the remaining tasks.\n\n- `items` an array of items to pass to `method`.\n- `method` a function with the signature `function (item, next, i)`.\n    - `item` - is the currently processing item in the `items` array.\n    - `next` - callback function to indicate the end of processing for `item`. Calling `next` with a truthy parameter indicates an error and ends `Items.serial`.\n    - `i` - The current item's index in the `items` array.\n- `callback` - a function with the signature `function (err)`.\n    - `err` - indicates any errors during processing.\n\n## `Items.parallel(items, method, callback)`\n\nRuns `method` against each value in the `items` array *in parallel*. `callback` is executed when all of the tasks are complete. Calling back with an error will short-circuit the remaining tasks.\n\n- `items` an array of items to pass to `method`.\n- `method` a function with the signature `function (item, next, i)`.\n    - `item` - is the currently processing item in the `items` array.\n    - `next` - callback function to indicate the end of processing for `item`. Calling `next` with a truthy parameter indicates an error and ends `Items.parallel`.\n    - `i` - The current item's index in the `items` array.\n- `callback` - a function with the signature `function (err)`.\n    - `err` - indicates any errors during processing.\n\n## `Items.parallel.execute(tasks, callback)`\n\nRuns all of the functions in `tasks` *in parallel* and stores the results in a collector object passed into `callback`. If any of the tasks callback with an error, the collector object is `null`.\n\n- `tasks` - on object containing functions to execute in parallel. The `key` of the function is the `key` in the result of collector object. The task should have the signature `function (next)`\n    - `next(err, result)` - callback function to indicate the end of processing for the current task.\n        - `err` - indicates any errors during processing.\n        - `result` - result of this function. This value will be set on the collector object in the final callback.\n- `callback(err, result)`\n    - `err` - any errors reported by *any* of the `tasks`.\n    - `result` - an object containing the result of running all of the `tasks`. `result` will be `null` if any of the tasks callback with an error. The `result.key` will be the corresponding `key` of the `tasks` object.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/items.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "version": "2.1.1"
}
